import sys
import os
import warnings
os.environ['STREAMLIT_SERVER_ENABLE_STATIC_SERVING'] = 'true'
sys.modules['__main__'].__file__ = 'hack.py'
warnings.filterwarnings("ignore")
import streamlit as st
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Page Configuration
st.set_page_config(
    page_title="Runtime Error News Detection",
    page_icon="üõ°Ô∏è",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Custom CSS Styling
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Kanit:wght@600&display=swap');
    
    .main {
        background-color: #0F172A;
    }
    
    .header {
        color: #38BDF8;
        font-family: 'Kanit', sans-serif;
        text-align: center;
        padding: 2rem;
        text-shadow: 0 0 10px rgba(56, 189, 248, 0.5);
    }
    
    .input-box {
        background-color: #1E293B;
        padding: 2rem;
        border-radius: 15px;
        border: 1px solid #334155;
        margin-bottom: 2rem;
    }
    
    .result-box {
        padding: 2rem;
        border-radius: 15px;
        color: white;
        font-size: 1.2rem;
        text-align: center;
        margin-top: 2rem;
        border: 2px solid;
    }
    
    .footer {
        text-align: center;
        padding: 1rem;
        color: #64748B;
        position: fixed;
        bottom: 0;
        width: 100%;
    }
    
    .stTextArea textarea {
        background-color: #1E293B !important;
        color: white !important;
    }
</style>
""", unsafe_allow_html=True)

# Load Data and Model (Cached)
@st.cache_data
def load_data_and_model():
    # Data Loading and Preprocessing
    news_df = pd.read_csv('train.csv.zip')
    news_df = news_df.fillna('')
    news_df['content'] = news_df['author'] + ' ' + news_df['title']
    
    # Text Preprocessing
    ps = PorterStemmer()
    nltk.download('stopwords')
    
    def stemming(content):
        stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
        stemmed_content = stemmed_content.lower().split()
        stemmed_content = [ps.stem(word) for word in stemmed_content 
                         if word not in stopwords.words('english')]
        return ' '.join(stemmed_content)
    
    news_df['content'] = news_df['content'].apply(stemming)
    
    # Vectorization
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(news_df['content'])
    y = news_df['label']
    
    # Model Training
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, stratify=y, random_state=1)
    
    model = LogisticRegression()
    model.fit(X_train, y_train)
    
    return vectorizer, model

st.markdown('<div class="header"><h1>üõ°Ô∏è RUNTIME ERROR NEWS DETECTION</h1></div>', unsafe_allow_html=True)
st.markdown("### AI-Powered News Authenticity System")
st.markdown("---")

# Sidebar
with st.sidebar:
    st.header("About")
    st.markdown("""
    **Runtime Error News Detection** is an advanced AI system that helps identify potentially unreliable news content.
    
    **Key Features:**
    - Real-time analysis
    - Natural Language Processing (NLP)
    - Logistic Regression Model
    - Trained on 20,000+ news samples
    """)
    st.markdown("---")
    st.markdown("Developed with ‚ù§Ô∏è by [Your Name]")

# Main Content
vectorizer, model = load_data_and_model()

with st.container():
    st.markdown('<div class="input-box">', unsafe_allow_html=True)
    
    input_text = st.text_area(
        "üìù Paste Suspicious News Content Here:",
        height=200,
        placeholder="Enter news article/text to verify authenticity..."
    )
    
    st.markdown('</div>', unsafe_allow_html=True)

# Prediction
if input_text:
    with st.spinner("üîç Analyzing content..."):
        # Preprocessing
        ps = PorterStemmer()
        processed_text = re.sub('[^a-zA-Z]', ' ', input_text)
        processed_text = processed_text.lower().split()
        processed_text = [ps.stem(word) for word in processed_text 
                         if word not in stopwords.words('english')]
        processed_text = ' '.join(processed_text)
        
        # Vectorization and Prediction
        vectorized_text = vectorizer.transform([processed_text])
        prediction = model.predict(vectorized_text)
        prediction_proba = model.predict_proba(vectorized_text)[0]

    # Display Results (now properly indented under the if block)
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìä Confidence Metrics")
        st.metric(label="Authentic News Probability", 
                value=f"{prediction_proba[0]*100:.2f}%")
        st.metric(label="Suspicious Content Probability", 
                value=f"{prediction_proba[1]*100:.2f}%")
    
    with col2:
        st.markdown("### üéØ System Verdict")
        if prediction[0] == 0:
            st.markdown('<div class="result-box" style="border-color: #10B981; background-color: #05966950;">‚úÖ Verified Authentic Content</div>', 
                       unsafe_allow_html=True)
        else:
            st.markdown('<div class="result-box" style="border-color: #EF4444; background-color: #DC262650;">‚ùå Potential Runtime Error Detected</div>', 
                       unsafe_allow_html=True)
    
    st.markdown("---")
    st.markdown("### üîç Content Analysis")
    st.write("Processed Text Pattern:")
    st.code(processed_text, language='text')

else:
    st.warning("‚ö†Ô∏è Input field empty - Please provide news content for analysis")

# Footer
st.markdown("---")
st.markdown('<div class="footer">Runtime Error Detection System v2.0 | ¬© 2024 NeuralGuard</div>', 
           unsafe_allow_html=True)
